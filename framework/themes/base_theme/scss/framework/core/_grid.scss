/**
 * Define your breakpoints. The first value is the prefix that shall be used for
 * your classes (e.g. `.palm--one-half`), the second value is the media query
 * that the breakpoint fires at.
 */
$breakpoints: "palm" $breakpoint--palm, "lap" $breakpoint--lap, "portable" $breakpoint--portable, "desk" $breakpoint--desk !default;

/**
 * Define breakpoint keys for generation of keyword based sizes
 * such as %desk--one-third etc.
 */
$breakpoint-size-keys: "palm", "portable", "lap", "desk" !default;

/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * These mixins are for the library to use only, you should not need to modify
 * them at all.
 *
 * Enclose a block of code with a media query as named in `$breakpoints`.
 */
@mixin grid-media-query($media-query) {
	$breakpoint-found: false;
	
	@each $breakpoint in $breakpoints {
		$name: nth($breakpoint, 1);
		$declaration: nth($breakpoint, 2);
		
		@if $media-query == $name and $declaration {
			$breakpoint-found: true;
			
			@media only screen and #{$declaration} {
				@content;
			}
		}
	}
	
	@if not $breakpoint-found {
		@warn "Breakpoint ‘#{$media-query}’ does not exist";
	}
}

/*------------------------------------*\
    GRID WRAPPER
\*------------------------------------*/
%grid {
	
	display: grid;
	
	margin-left: -$gutter;
	margin-right: -$gutter;
	padding: 0 $gutter;
	
	grid-template-columns: repeat(10, 1fr);
	
}

/*------------------------------------*\
    GRID ITEM
\*------------------------------------*/
%grid__item {
	
	display: flex;
	justify-content: center;
	align-items: center;
	
}

%grid__item__left{
	
	display: flex;
	justify-content: flex-start;
	align-items: center;
	
}

/*------------------------------------*\
    GRID COLUMNS
\*------------------------------------*/

%grid--whole {
	
	grid-template-columns: repeat(1, 1fr);
	
}

%grid--halves {
	
	grid-template-columns: repeat(12, 1fr);
	
	> *{
        
        grid-column: span 6;
		
		@include media-query('portable'){
			
			grid-column: span 12;
			
		}
		
	}
    
}

%grid--thirds {
	
	grid-template-columns: repeat(12, 1fr);
	
	> *{
        
        grid-column: span 4;
        
    }
    
}

%grid--quarters {
	
	grid-template-columns: repeat(12, 1fr);
	
	> *{
		
		grid-column: span 3;

	}

}

%grid--fifths {
	
	grid-template-columns: repeat(5, 1fr);
	
	
}

%grid--sixths {
	
	grid-template-columns: repeat(12, 1fr);
	
	> *{
		
		grid-column: span 2;
		
	}
	
}

%grid--eighths {
	
	grid-template-columns: repeat(8, 1fr);
	
}

%grid--tenths {
	
	grid-template-columns: repeat(10, 1fr);
	
}

%grid--twelfths {
	
	grid-template-columns: repeat(12, 1fr);
	
	
}


/*------------------------------------*\
    GRID ITEM WIDTHS
\*------------------------------------*/
/**
 * Create our width classes, prefixed by the specified namespace.
 */
@mixin device-type($namespace: "") {
	$prefix: #{"%" + $namespace};
	
	/**
	 * Whole
	 */
	#{$prefix}one-whole {
		
		grid-column: 1/-1;
		
	}
	
	/**
	 * Halves
	 */
	#{$prefix}one-half {
		
		grid-column: span 6;
		
	}
	
	/**
	 * Thirds
	 */
	#{$prefix}one-third {
		
		grid-column: span 4;
		
	}
	
	#{$prefix}two-thirds {
		
		grid-column: span 8;
		
	}
	
	/**
	 * Quarters
	 */
	#{$prefix}one-quarter {
		
		grid-column: span 3;
		
	}
	
	#{$prefix}two-quarters {
		@extend #{$prefix}one-half;
	}
	
	#{$prefix}three-quarters {
		
		grid-column: span 9;
		
	}
	
	/**
	 * Fifths
	 */
	#{$prefix}one-fifth {
        
        grid-column: span 1;
    
    }
	
	#{$prefix}two-fifths {
        
        grid-column: span 2;
        
    }
	
	#{$prefix}three-fifths {
        
        grid-column: span 3;
        
    }
	
	#{$prefix}four-fifths {
        
        grid-column: span 4;
        
    }
	
	/**
	 * Sixths
	 */
	#{$prefix}one-sixth {
        
        grid-column: span 2;
        
    }
	
	#{$prefix}two-sixths {
        
        @extend #{$prefix}one-third;
        
    }
	
	#{$prefix}three-sixths {
        
        @extend #{$prefix}one-half;
        
    }
	
	#{$prefix}four-sixths {
        
        @extend #{$prefix}two-thirds;
        
    }
	
	#{$prefix}five-sixths {
        
        grid-column: span 10;
        
    }
	
	/**
	 * Eighths
	 */
	#{$prefix}one-eighth {
        
        grid-column: span 1;
        
    }
	
	#{$prefix}two-eighths {
        
        grid-column: span 2;
        
    }
	
	#{$prefix}three-eighths {
        
        grid-column: span 3;
        
    }
	
	#{$prefix}four-eighths {
        
        grid-column: span 4;
        
    }
	
	#{$prefix}five-eighths {
        
        grid-column: span 5;
        
    }
	
	#{$prefix}six-eighths {
        
        grid-column: span 6;
        
    }
	
	#{$prefix}seven-eighths {
        
        grid-column: span 7;
        
    }
	
	/**
	 * Tenths
	 */
	#{$prefix}one-tenth {
        
        grid-column: span 1;
        
    }
	
	#{$prefix}two-tenths {
        
        grid-column: span 2;
        
    }
	
	#{$prefix}three-tenths {
        
        grid-column: span 3;
        
    }
	
	#{$prefix}four-tenths {
        
        grid-column: span 4;
        
    }
	
	#{$prefix}five-tenths {
        
        grid-column: span 5;
        
    }
	
	#{$prefix}six-tenths {
        
        grid-column: span 6;
        
    }
	
	#{$prefix}seven-tenths {
        
        grid-column: span 7;
        
    }
	
	#{$prefix}eight-tenths {
        
        grid-column: span 8;
        
    }
	
	#{$prefix}nine-tenths {
        
        grid-column: span 9;
        
    }
	
	/**
	 * Twelfths
	 */
	#{$prefix}one-twelfth {
		width: 8.333%;
	}
	
	#{$prefix}two-twelfths {
		@extend #{$prefix}one-sixth;
	}
	
	#{$prefix}three-twelfths {
		@extend #{$prefix}one-quarter;
	}
	
	#{$prefix}four-twelfths {
		@extend #{$prefix}one-third;
	}
	
	#{$prefix}five-twelfths {
		width: 41.666%;
	}
	
	#{$prefix}six-twelfths {
		@extend #{$prefix}one-half;
	}
	
	#{$prefix}seven-twelfths {
		width: 58.333%;
	}
	
	#{$prefix}eight-twelfths {
		@extend #{$prefix}two-thirds;
	}
	
	#{$prefix}nine-twelfths {
		@extend #{$prefix}three-quarters;
	}
	
	#{$prefix}ten-twelfths {
		@extend #{$prefix}five-sixths;
	}
	
	#{$prefix}eleven-twelfths {
		width: 91.666%;
	}
}

// Generate regular sizes
@include device-type;

// Generate responsive sizes
@each $size-key in $breakpoint-size-keys {
	@include grid-media-query($size-key) {
		@include device-type("#{$size-key}--");
	}
}
