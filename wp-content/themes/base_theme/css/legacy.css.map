{"version":3,"sources":["legacy.css"],"names":[],"mappings":"iBAoYA,gBAAA,cAAA,mBAAA,eAAA,eAAA,eAAA,aAAA,YAAA,gBACE,QAAA,MAQF,qCACE,OAAA,KAAA,EAEF,kBACE,WAAA,KAEF,qBACE,cAAA,KAEF,0BACE,cAAA","file":"legacy.css","sourcesContent":["@charset \"UTF-8\";\n/*------------------------------------*\\\n    MODE TEMPLATE\n\n\n    This template can be used to create a new \n    mode. It builds the core framework and gives \n    access to all imports such as components.\n\\*------------------------------------*/\n/*------------------------------------*\\\n    IMPORT FRAMEWORK\n\\*------------------------------------*/\n/*â˜¹ Force @charset \"UTF-8\"; generation*/\n/*------------------------------------*\\\r\n    VARS\r\n\\*------------------------------------*/\n/*------------------------------------*\\\r\n    GENERIC\r\n\\*------------------------------------*/\n/*------------------------------------*\\\r\n    BREAKPOINTS\r\n\\*------------------------------------*/\n/*------------------------------------*\\\r\n    FONT-FACE DECLARATIONS\r\n\\*------------------------------------*/\n/*------------------------------------*\\\r\n    TYPOGRAPHY\r\n\\*------------------------------------*/\n/*------------------------------------*\\\r\n    MIXINS\r\n\\*------------------------------------*/\n/*------------------------------------*\\\n    BOUNCE SCROLL\n    \n    A little helper to get 'bouncy' scroll areas on iOS    \n\\*------------------------------------*/\n/*------------------------------------*\\\n    BUTTON\n    \n    Some useful base button styles.   \n\\*------------------------------------*/\n/*------------------------------------*\\\n    ELLIPSIS\n    \n    Especially useful for when you want text to truncate \n    gracefully in single line inline / inline-block elements  \n\\*------------------------------------*/\n/*------------------------------------*\\\n    FEATURE FAIL\n\n    Use this mixin to write fallback css for bleeding edge features.\n    Target modernizr classes for $feature.\n\n    E.G.\n\n    .test-element {\n        display: flex;\n\n        @include feauture-fail(\"no-flexbox\") {\n            display: table;\n        }\n    }\n}\n\\*------------------------------------*/\n/*------------------------------------*\\\r\n    FONT SIZE\r\n    \r\n    This mixin will generate a REM unit for your chosen font size. It will also add\r\n    the usual pixel unit for a fallback for browsers that don't support REMS. \r\n    \r\n    This can also caluculate a line height for you based on your base line-height ratio.\r\n    \r\n    You can append an !important too.\r\n    \r\n    You can override the base line-height ratio if needed too. \r\n    \r\n    Usage example: \r\n    \r\n    With line-height: \r\n    \r\n    body {\r\n    \r\n    \t@include font-size(16px, true);\r\n    }\r\n    \r\n    Without line-height: \r\n    \r\n    body {\r\n    \t\r\n    \t@include font-size(16px);\r\n    }\r\n    \r\n\\*------------------------------------*/\n/*------------------------------------*\\\n    FORM FIELD\n    \n    Some useful base form field styles.   \n\\*------------------------------------*/\n/*------------------------------------*\\\n    HOVER\n    \n    A useful little mixin to help generate better hover / focus etc. states.\n    This also has an 'include-active' flag which will help account for active states too.  \n\\*------------------------------------*/\n/*------------------------------------*\\\r\n    IE\r\n    \r\n    This mixin will help generate IE specific CSS. Add a version number as a parameter \r\n    and the mixin will do the rest!    \r\n\\*------------------------------------*/\n/*------------------------------------*\\\r\n    MEDIA QUERY\r\n\r\n    This mixin will wrap your code in the appropriate media query of your choosing.\r\n\r\n    For example. If you want to make the body background magenta on mobile only:\r\n\r\n    body {\r\n\t    @include media-query(palm) {\r\n\t    \tbackground: magenta;\r\n\t    }\r\n    }\r\n\\*------------------------------------*/\n/*------------------------------------*\\\n    MODE\n    \n    This simple mixin allows you to fence css into particular sections.\n    For example: you may have an admin area. The admin area uses the global\n    styles but also has its own. You'd create a new file in your 'project'\n    directory called 'admin.scss'. In there you would set '$mode: \"admin\"'. \n\n    Within your components etc. you would then do the following: \n\n    .a-css-class {\n    \t\n    \t// This stuff will only render in admin.css\n    \t@include mode(\"admin\") {\n\t\t\tbackground: red;\n    \t}\n    }\n\\*------------------------------------*/\n/*------------------------------------*\\\n    NO JS\n\n    A simple mixin that will allow consistent no JS related styles \n\\*------------------------------------*/\n/*------------------------------------*\\\n    PLACEHOLDER\n    \n    This little mixin will help style those pesky placeholders    \n\\*------------------------------------*/\n/*------------------------------------*\\\r\n    PRINT\r\n    \r\n    A very simply \"wrapper\" that allows you to add print specific styles within your css. \r\n    This is mainly in a mixin so that if anything changes in the future, we can just update this \r\n    mixin rather than refactoring our whole project.\r\n    \r\n    Usage example: \r\n    \r\n    body {\r\n    \tcolor: #f3f3f3;\r\n    \r\n\t\t@include print {\r\n\t\t\tcolor: #000000;\r\n\t\t}\r\n    }\r\n\\*------------------------------------*/\n/*------------------------------------*\\\n    SELECTION\n    \n    A useful little mixin for styling text selection.   \n\\*------------------------------------*/\n/*------------------------------------*\\\n    WORD WRAP\n    \n    Useful little mixin for breaking words. \n    Really useful for email links.\n\\*------------------------------------*/\n/*------------------------------------*\\\r\n    CORE\r\n\\*------------------------------------*/\n/**\n * Define your breakpoints. The first value is the prefix that shall be used for\n * your classes (e.g. `.palm--one-half`), the second value is the media query\n * that the breakpoint fires at.\n */\n/**\n * Define breakpoint keys for generation of keyword based sizes\n * such as %desk--one-third etc.\n */\n/*------------------------------------*\\\n    $MIXINS\n\\*------------------------------------*/\n/**\n * These mixins are for the library to use only, you should not need to modify\n * them at all.\n *\n * Enclose a block of code with a media query as named in `$breakpoints`.\n */\n/*------------------------------------*\\\n    GRID WRAPPER\n\\*------------------------------------*/\n/*------------------------------------*\\\n    GRID ITEM\n\\*------------------------------------*/\n/**\n * Reversed grids allow you to structure your source in the opposite order to\n * how your rendered layout will appear. Extends `%grid`.\n */\n/**\n * Gutterless grids have all the properties of regular grids, minus any spacing.\n * Extends `%grid`.\n */\n/**\n * Align the entire grid to the right. Extends `%grid`.\n */\n/**\n * Centered grids align grid items centrally without needing to use push or pull\n * classes. Extends `%grid`.\n */\n/**\n * Align grid cells vertically (`%grid--middle` or `%grid--bottom` or `%grid--top`). Extends\n * `%grid`.\n */\n/**\n * Create grids with narrower gutters. Extends `%grid`.\n */\n/**\n * Create grids with wider gutters. Extends `%grid`.\n */\n/**\n * Level heights, requires an `inner` element to grow into it's parent. Extends `%grid`.\n * Modern only. LT IE 10 doesn't deserve level heights\n */\n/**\n * Put space between (ideally two) buttons so they stay away from each other.\n * Great alternative to floating right like the old days\n */\n/*------------------------------------*\\\n    $WIDTHS\n\\*------------------------------------*/\n/**\n * Create our width classes, prefixed by the specified namespace.\n */\n/**\n     * Whole\n     */\n/**\n     * Halves\n     */\n/**\n     * Thirds\n     */\n/**\n     * Quarters\n     */\n/**\n     * Fifths\n     */\n/**\n     * Sixths\n     */\n/**\n     * Eighths\n     */\n/**\n     * Tenths\n     */\n/**\n     * Twelfths\n     */\n@media only screen and (max-width: 683px) {\n  /**\n     * Whole\n     */\n  /**\n     * Halves\n     */\n  /**\n     * Thirds\n     */\n  /**\n     * Quarters\n     */\n  /**\n     * Fifths\n     */\n  /**\n     * Sixths\n     */\n  /**\n     * Eighths\n     */\n  /**\n     * Tenths\n     */\n  /**\n     * Twelfths\n     */ }\n\n@media only screen and (min-width: 684px) and (max-width: 999px) {\n  /**\n     * Whole\n     */\n  /**\n     * Halves\n     */\n  /**\n     * Thirds\n     */\n  /**\n     * Quarters\n     */\n  /**\n     * Fifths\n     */\n  /**\n     * Sixths\n     */\n  /**\n     * Eighths\n     */\n  /**\n     * Tenths\n     */\n  /**\n     * Twelfths\n     */ }\n\n@media only screen and (max-width: 999px) {\n  /**\n     * Whole\n     */\n  /**\n     * Halves\n     */\n  /**\n     * Thirds\n     */\n  /**\n     * Quarters\n     */\n  /**\n     * Fifths\n     */\n  /**\n     * Sixths\n     */\n  /**\n     * Eighths\n     */\n  /**\n     * Tenths\n     */\n  /**\n     * Twelfths\n     */ }\n\n@media only screen and (min-width: 1000px) {\n  /**\n     * Whole\n     */\n  /**\n     * Halves\n     */\n  /**\n     * Thirds\n     */\n  /**\n     * Quarters\n     */\n  /**\n     * Fifths\n     */\n  /**\n     * Sixths\n     */\n  /**\n     * Eighths\n     */\n  /**\n     * Tenths\n     */\n  /**\n     * Twelfths\n     */ }\n\n.lt-ie9 header, .lt-ie9 nav, .lt-ie9 article, .lt-ie9 section, .lt-ie9 aside, .lt-ie9 figure, .lt-ie9 figcaption, .lt-ie9 footer, .lt-ie9 main {\n  display: block; }\n\n/*------------------------------------*\\\n    DECLARATIONS\n\\*------------------------------------*/\n/*------------------------------------*\\\n    IMPORTS\n\\*------------------------------------*/\n.gts-breathe:not([class*=\"breathe--\"]) {\n  margin: 20px 0; }\n\n.gts-breathe--top {\n  margin-top: 20px; }\n\n.gts-breathe--bottom {\n  margin-bottom: 20px; }\n\n.gts-breathe--bottom-mini {\n  margin-bottom: 10px; }\n"]}